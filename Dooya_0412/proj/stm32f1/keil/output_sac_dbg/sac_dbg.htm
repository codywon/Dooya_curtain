<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output_sac_dbg\sac_dbg.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output_sac_dbg\sac_dbg.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Wed Apr 12 18:27:25 2017
<BR><P>
<H3>Maximum Stack Usage =        708 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; serial_poll &rArr; spi_poll &rArr; spi_rx_wait &rArr; spi_rx &rArr; serial_process_inc_pkt &rArr; conf_rx &rArr; conf_update &rArr; sched_run_all &rArr; sched_evaluate &rArr; sched_determine_range &rArr; sched_determine_big_range &rArr;  sched_determine_range (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[e]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">NMI_Handler</a><BR>
 <LI><a href="#[f]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">HardFault_Handler</a><BR>
 <LI><a href="#[10]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">MemManage_Handler</a><BR>
 <LI><a href="#[11]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">BusFault_Handler</a><BR>
 <LI><a href="#[12]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">UsageFault_Handler</a><BR>
 <LI><a href="#[13]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">SVC_Handler</a><BR>
 <LI><a href="#[14]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">DebugMon_Handler</a><BR>
 <LI><a href="#[15]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">PendSV_Handler</a><BR>
 <LI><a href="#[29]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[13a]">sched_determine_big_range</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[139]">sched_determine_range</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[29]">ADC1_2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[11]">BusFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2c]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2d]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[22]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[23]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[24]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[25]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[26]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[27]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[28]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[14]">DebugMon_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1d]">EXTI0_IRQHandler</a> from stm32.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3f]">EXTI15_10_IRQHandler</a> from spi_platform.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1e]">EXTI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1f]">EXTI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[20]">EXTI3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[21]">EXTI4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2e]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1b]">FLASH_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[f]">HardFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[37]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[36]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[39]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[38]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[10]">MemManage_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[e]">NMI_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[18]">PVD_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[15]">PendSV_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1c]">RCC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[40]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1a]">RTC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[4d]">Reset_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3a]">SPI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3b]">SPI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[13]">SVC_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[16]">SysTick_Handler</a> from stm32.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[43]">SystemInit</a> from system_stm32f10x.o(.text) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[19]">TAMPER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2f]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[32]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[31]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[30]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[33]">TIM2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[34]">TIM3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[35]">TIM4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3c]">USART1_IRQHandler</a> from app_uart.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3d]">USART2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3e]">USART3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[41]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2a]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2b]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[12]">UsageFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[17]">WWDG_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[44]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[9]">app_param_set_device_info</a> from app_property.o(.text) referenced 2 times from sac_property.o(.data)
 <LI><a href="#[4b]">conf_dsn_rx</a> from conf_access.o(.text) referenced from conf_access.o(.text)
 <LI><a href="#[4c]">conf_model_rx</a> from conf_access.o(.text) referenced from conf_access.o(.text)
 <LI><a href="#[42]">main</a> from app_main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[4a]">mcu_boot</a> from demo_img_mgmt.o(.text) referenced from demo_img_mgmt.o(.text)
 <LI><a href="#[49]">mcu_img_load</a> from demo_img_mgmt.o(.text) referenced from demo_img_mgmt.o(.text)
 <LI><a href="#[48]">mcu_img_upgrade_check</a> from demo_img_mgmt.o(.text) referenced from demo_img_mgmt.o(.text)
 <LI><a href="#[45]">prop_dp_send</a> from prop_dp.o(.text) referenced from serial_msg.o(.text)
 <LI><a href="#[1]">prop_send_generic</a> from props.o(.text) referenced 24 times from sac_property.o(.data)
 <LI><a href="#[2]">sac_param_set_delete_route</a> from sac_property.o(.text) referenced 2 times from sac_property.o(.data)
 <LI><a href="#[5]">sac_param_set_direction</a> from sac_property.o(.text) referenced 2 times from sac_property.o(.data)
 <LI><a href="#[8]">sac_param_set_down_route</a> from sac_property.o(.text) referenced 2 times from sac_property.o(.data)
 <LI><a href="#[6]">sac_param_set_hand_pull</a> from sac_property.o(.text) referenced 2 times from sac_property.o(.data)
 <LI><a href="#[4]">sac_param_set_present</a> from sac_property.o(.text) referenced 2 times from sac_property.o(.data)
 <LI><a href="#[3]">sac_param_set_reset_factory</a> from sac_property.o(.text) referenced 2 times from sac_property.o(.data)
 <LI><a href="#[0]">sac_param_set_status</a> from sac_property.o(.text) referenced 2 times from sac_property.o(.data)
 <LI><a href="#[7]">sac_param_set_up_route</a> from sac_property.o(.text) referenced 2 times from sac_property.o(.data)
 <LI><a href="#[b]">send_template_version</a> from demo_img_mgmt.o(.text) referenced 2 times from sac_property.o(.data)
 <LI><a href="#[c]">send_version</a> from app_main.o(.text) referenced 2 times from sac_property.o(.data)
 <LI><a href="#[a]">set_schedule</a> from app_main.o(.text) referenced 20 times from sac_property.o(.data)
 <LI><a href="#[46]">test_patt_get</a> from demo_stream.o(.text) referenced from demo_stream.o(.text)
 <LI><a href="#[47]">test_patt_set</a> from demo_stream.o(.text) referenced from demo_stream.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[44]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[15e]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[4e]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[15d]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[15f]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[160]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[161]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[162]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[163]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[4d]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))

<P><STRONG><a name="[e]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[10a]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_find_ver
</UL>

<P><STRONG><a name="[50]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_param_set_custom_scene
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_cmd
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_schedule
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_set
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_create_resp
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_fetched
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_request
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_data_tx
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_create_tx
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_set_sched_value
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_set_prop
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_read
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_model_rx
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_dsn_rx
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_img_load
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_put
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_name_tlv
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_tlv
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_send_prop
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_request_prop
</UL>

<P><STRONG><a name="[132]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_month_find_range
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_day_find_range
</UL>

<P><STRONG><a name="[164]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[a]"></a>set_schedule</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, app_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = set_schedule &rArr; sched_run_all &rArr; sched_evaluate &rArr; sched_determine_range &rArr; sched_determine_big_range &rArr;  sched_determine_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_run_all
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sac_property.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>send_version</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, app_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = send_version &rArr; prop_send &rArr; serial_send_prop &rArr; serial_tx_buf_send &rArr; spi_tx_wait &rArr; spi_tx_start &rArr; spi_tx_end &rArr; spi_platform_io &rArr; spi_platform_in
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_send
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sac_property.o(.data)
</UL>
<P><STRONG><a name="[a8]"></a>demo_set_button_state</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_button_read
</UL>

<P><STRONG><a name="[42]"></a>main</STRONG> (Thumb, 214 bytes, Stack size 0 bytes, app_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 708<LI>Call Chain = main &rArr; serial_poll &rArr; spi_poll &rArr; spi_rx_wait &rArr; spi_rx &rArr; serial_process_inc_pkt &rArr; conf_rx &rArr; conf_update &rArr; sched_run_all &rArr; sched_evaluate &rArr; sched_determine_range &rArr; sched_determine_big_range &rArr;  sched_determine_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;template_version_sent
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_set_factory_rst_led
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_reset_module
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_ready
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_factory_reset_detect
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_platform_init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_cmd
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_poll
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_run_all
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_send_done
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_poll
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_lookup_error
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_lookup
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_img_mgmt_init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_stream_init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_poll
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_poll
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_gt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[69]"></a>calccrc</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, app_protocol_i.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = calccrc
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qioucrc16
</UL>

<P><STRONG><a name="[68]"></a>qioucrc16</STRONG> (Thumb, 52 bytes, Stack size 28 bytes, app_protocol_i.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = qioucrc16 &rArr; calccrc
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calccrc
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_frame
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_frame
</UL>

<P><STRONG><a name="[6a]"></a>parse_frame</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, app_protocol_i.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = parse_frame &rArr; qioucrc16 &rArr; calccrc
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dooya_get_status
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dooya_get_error
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qioucrc16
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_poll
</UL>

<P><STRONG><a name="[6d]"></a>build_frame</STRONG> (Thumb, 284 bytes, Stack size 56 bytes, app_protocol_i.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = build_frame &rArr; qioucrc16 &rArr; calccrc
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qioucrc16
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_poll
</UL>

<P><STRONG><a name="[6f]"></a>app_param_set_ack_cmd</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, app_property.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_lookup
</UL>

<P><STRONG><a name="[9]"></a>app_param_set_device_info</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, app_property.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = app_param_set_device_info &rArr; prop_lookup &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_lookup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sac_property.o(.data)
</UL>
<P><STRONG><a name="[70]"></a>app_param_set_custom_scene</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, app_property.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[88]"></a>com_rx_hdl</STRONG> (Thumb, 764 bytes, Stack size 0 bytes, app_control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[8b]"></a>com_rx_start</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, app_control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_poll
</UL>

<P><STRONG><a name="[71]"></a>com_tx_start</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, app_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = com_tx_start
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_poll
</UL>

<P><STRONG><a name="[78]"></a>com_err_reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_poll
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_init
</UL>

<P><STRONG><a name="[76]"></a>com_err_handle</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, app_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = com_err_handle &rArr; prop_lookup &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_lookup
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_poll
</UL>

<P><STRONG><a name="[77]"></a>com_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, app_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = com_init &rArr; USART_Configuration &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_err_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
</UL>

<P><STRONG><a name="[7a]"></a>msg_queue_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, app_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = msg_queue_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
</UL>

<P><STRONG><a name="[8a]"></a>msg_queue_put</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, app_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = msg_queue_put
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sac_param_set_down_route
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sac_param_set_up_route
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sac_param_set_hand_pull
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sac_param_set_direction
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sac_param_set_present
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sac_param_set_reset_factory
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sac_param_set_delete_route
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sac_param_set_status
</UL>

<P><STRONG><a name="[8c]"></a>msg_queue_get</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, app_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = msg_queue_get
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_poll
</UL>

<P><STRONG><a name="[5b]"></a>app_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = app_init &rArr; com_init &rArr; USART_Configuration &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_queue_init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_init
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[67]"></a>app_poll</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = app_poll &rArr; custom_poll &rArr; build_frame &rArr; qioucrc16 &rArr; calccrc
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_poll
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[165]"></a>delay_10ms</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_control.o(.text), UNUSED)

<P><STRONG><a name="[166]"></a>f2c</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, app_control.o(.text), UNUSED)

<P><STRONG><a name="[167]"></a>c2f</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, app_control.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>NVIC_Configuration</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, app_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[81]"></a>UART1_GPIO_Configuration</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, app_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART1_GPIO_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[79]"></a>USART_Configuration</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, app_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USART_Configuration &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_GPIO_Configuration
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_init
</UL>

<P><STRONG><a name="[3c]"></a>USART1_IRQHandler</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, app_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_rx_hdl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>dooya_get_status</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, sac_protocol_i.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dooya_get_status
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_frame
</UL>

<P><STRONG><a name="[6c]"></a>dooya_get_error</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sac_protocol_i.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dooya_get_error
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_frame
</UL>

<P><STRONG><a name="[0]"></a>sac_param_set_status</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, sac_property.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = sac_param_set_status &rArr; msg_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_queue_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sac_property.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>sac_param_set_delete_route</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, sac_property.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = sac_param_set_delete_route &rArr; msg_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_queue_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sac_property.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>sac_param_set_reset_factory</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, sac_property.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = sac_param_set_reset_factory &rArr; msg_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_queue_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sac_property.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>sac_param_set_present</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, sac_property.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = sac_param_set_present &rArr; msg_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_queue_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sac_property.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>sac_param_set_direction</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, sac_property.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = sac_param_set_direction &rArr; msg_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_queue_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sac_property.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>sac_param_set_hand_pull</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, sac_property.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = sac_param_set_hand_pull &rArr; msg_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_queue_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sac_property.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>sac_param_set_up_route</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, sac_property.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = sac_param_set_up_route &rArr; msg_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_queue_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sac_property.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>sac_param_set_down_route</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, sac_property.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = sac_param_set_down_route &rArr; msg_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_queue_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sac_property.o(.data)
</UL>
<P><STRONG><a name="[168]"></a>sac_param_set_device_info</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, sac_property.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>custom_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sac_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = custom_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
</UL>

<P><STRONG><a name="[7d]"></a>custom_poll</STRONG> (Thumb, 280 bytes, Stack size 16 bytes, sac_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = custom_poll &rArr; build_frame &rArr; qioucrc16 &rArr; calccrc
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_queue_get
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_err_handle
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_err_reset
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_tx_start
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_rx_start
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_frame
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_poll
</UL>

<P><STRONG><a name="[55]"></a>mcu_io_init</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, mcu_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mcu_io_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[56]"></a>spi_platform_init</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, spi_platform.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = spi_platform_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[91]"></a>spi_platform_intr_init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, spi_platform.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = spi_platform_intr_init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_intr_init
</UL>

<P><STRONG><a name="[94]"></a>spi_platform_slave_select</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, spi_platform.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_platform_slave_select
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_status
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_rx_wait
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_rx
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tx_end
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tx_buf_get_for_props
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tx_buf_get
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_poll
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_is_ads_busy
</UL>

<P><STRONG><a name="[96]"></a>spi_platform_slave_deselect</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, spi_platform.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_platform_slave_deselect
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_platform_wait_idle
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_status
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_rx_wait
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_rx
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tx_end
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tx_buf_get_for_props
</UL>

<P><STRONG><a name="[9b]"></a>spi_platform_io</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, spi_platform.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = spi_platform_io &rArr; spi_platform_in
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_platform_in
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_platform_out
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_status
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_rx_wait
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_rx
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tx_start
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tx_end
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tx_check_busy
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_is_ads_busy
</UL>

<P><STRONG><a name="[9c]"></a>spi_platform_io_crc</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, spi_platform.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = spi_platform_io_crc &rArr; spi_platform_in
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_platform_in
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_rx
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tx_start
</UL>

<P><STRONG><a name="[9d]"></a>spi_platform_crc_en</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, spi_platform.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_platform_crc_en
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_platform_wait_idle
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_rx
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tx_start
</UL>

<P><STRONG><a name="[9e]"></a>spi_platform_crc_err</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, spi_platform.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi_platform_crc_err
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_platform_wait_idle
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_rx
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tx_start
</UL>

<P><STRONG><a name="[3f]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, spi_platform.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI15_10_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>spi_platform_rx_pending</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, spi_platform.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_platform_rx_pending
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tx_buf_get_for_props
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tx_buf_get
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_poll
</UL>

<P><STRONG><a name="[a2]"></a>stm32_delay_time</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_gt
</UL>

<P><STRONG><a name="[57]"></a>stm32_reset_module</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stm32_reset_module
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5c]"></a>stm32_ready</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stm32_ready
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_status
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_poll
</UL>

<P><STRONG><a name="[169]"></a>stm32_get_led</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>stm32_set_led</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_set_factory_rst_led
</UL>

<P><STRONG><a name="[5e]"></a>stm32_set_factory_rst_led</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = stm32_set_factory_rst_led
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_set_led
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_factory_reset_detect
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI0_IRQHandler &rArr; stm32_button_read
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_button_read
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>SysTick_Handler</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, stm32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler &rArr; stm32_button_read
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_button_read
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_gt
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_set_button_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>stm32_factory_reset_detect</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = stm32_factory_reset_detect &rArr; stm32_set_factory_rst_led
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_button_read
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_gt
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_set_factory_rst_led
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[58]"></a>stm32_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = stm32_init &rArr; stm32_intr_init &rArr; spi_platform_intr_init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_systick_init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_intr_init
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[43]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo24
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[16a]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, system_stm32f10x.o(.text), UNUSED)

<P><STRONG><a name="[16b]"></a>EXTI_DeInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_platform_intr_init
</UL>

<P><STRONG><a name="[16c]"></a>EXTI_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[16d]"></a>EXTI_GenerateSWInterrupt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[16e]"></a>EXTI_GetFlagStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[16f]"></a>EXTI_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>EXTI_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[a0]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[ac]"></a>GPIO_DeInit</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[ae]"></a>GPIO_AFIODeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[83]"></a>GPIO_Init</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_GPIO_Configuration
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_platform_init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_init
</UL>

<P><STRONG><a name="[170]"></a>GPIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[171]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[172]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[173]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[174]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_tx_start
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_init
</UL>

<P><STRONG><a name="[75]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_tx_start
</UL>

<P><STRONG><a name="[175]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[176]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[177]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[178]"></a>GPIO_EventOutputConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[179]"></a>GPIO_EventOutputCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[17a]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_platform_intr_init
</UL>

<P><STRONG><a name="[17b]"></a>GPIO_ETH_MediaInterfaceConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[17c]"></a>RCC_DeInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[17d]"></a>RCC_HSEConfig</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[af]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[17e]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[17f]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[180]"></a>RCC_PLLConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[184]"></a>RCC_HCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[185]"></a>RCC_PCLK1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[186]"></a>RCC_PCLK2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[187]"></a>RCC_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[188]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[18a]"></a>RCC_LSEConfig</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[18b]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[18c]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[18d]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
</UL>

<P><STRONG><a name="[18e]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_GPIO_Configuration
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_platform_init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_init
</UL>

<P><STRONG><a name="[18f]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFIODeInit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[b2]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[190]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[191]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[192]"></a>RCC_MCOConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[193]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[194]"></a>RCC_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[195]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[7f]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_intr_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[80]"></a>NVIC_Init</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_platform_intr_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[196]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[197]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[198]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[8d]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_platform_init
</UL>

<P><STRONG><a name="[b3]"></a>I2S_Init</STRONG> (Thumb, 226 bytes, Stack size 56 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>

<P><STRONG><a name="[199]"></a>SPI_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[19a]"></a>I2S_StructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_platform_init
</UL>

<P><STRONG><a name="[19b]"></a>I2S_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[19c]"></a>SPI_I2S_ITConfig</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[19d]"></a>SPI_I2S_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_platform_io_crc
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_platform_out
</UL>

<P><STRONG><a name="[8e]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_platform_io_crc
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_platform_in
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_platform_init
</UL>

<P><STRONG><a name="[19e]"></a>SPI_NSSInternalSoftwareConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[19f]"></a>SPI_SSOutputCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[1a0]"></a>SPI_DataSizeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[1a1]"></a>SPI_TransmitCRC</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[1a2]"></a>SPI_CalculateCRC</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[1a3]"></a>SPI_GetCRC</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[1a4]"></a>SPI_GetCRCPolynomial</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[1a5]"></a>SPI_BiDirectionalLineConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_platform_init
</UL>

<P><STRONG><a name="[1a6]"></a>SPI_I2S_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[1a7]"></a>SPI_I2S_GetITStatus</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[1a8]"></a>SPI_I2S_ClearITPendingBit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[1a9]"></a>FLASH_SetLatency</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[1aa]"></a>FLASH_HalfCycleAccessCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[1ab]"></a>FLASH_PrefetchBufferCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[102]"></a>FLASH_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;template_version_sent
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_img_load
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_inactive_erase
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_img_mgmt_set_boot_state
</UL>

<P><STRONG><a name="[1ac]"></a>FLASH_UnlockBank1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[104]"></a>FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;template_version_sent
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_img_load
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_inactive_erase
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_img_mgmt_set_boot_state
</UL>

<P><STRONG><a name="[1ad]"></a>FLASH_LockBank1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>FLASH_GetBank1Status</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastBank1Operation
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[b5]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBank1Status
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_UserOptionByteConfig
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadOutProtection
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EnableWriteProtection
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramOptionByteData
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOptionBytes
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseAllPages
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[b7]"></a>FLASH_ErasePage</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;template_version_sent
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_inactive_erase
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_img_mgmt_set_boot_state
</UL>

<P><STRONG><a name="[b8]"></a>FLASH_EraseAllPages</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[b9]"></a>FLASH_WaitForLastBank1Operation</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBank1Status
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseAllBank1Pages
</UL>

<P><STRONG><a name="[ba]"></a>FLASH_EraseAllBank1Pages</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastBank1Operation
</UL>

<P><STRONG><a name="[bc]"></a>FLASH_GetReadOutProtectionStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOptionBytes
</UL>

<P><STRONG><a name="[bb]"></a>FLASH_EraseOptionBytes</STRONG> (Thumb, 150 bytes, Stack size 12 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetReadOutProtectionStatus
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[bd]"></a>FLASH_ProgramWord</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;template_version_sent
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_img_load
</UL>

<P><STRONG><a name="[be]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_img_mgmt_set_boot_state
</UL>

<P><STRONG><a name="[bf]"></a>FLASH_ProgramOptionByteData</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[c0]"></a>FLASH_EnableWriteProtection</STRONG> (Thumb, 200 bytes, Stack size 28 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[c1]"></a>FLASH_ReadOutProtection</STRONG> (Thumb, 156 bytes, Stack size 12 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[c2]"></a>FLASH_UserOptionByteConfig</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[1ae]"></a>FLASH_GetUserOptionByte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[1af]"></a>FLASH_GetWriteProtectionOptionByte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[1b0]"></a>FLASH_GetPrefetchBufferStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[1b1]"></a>FLASH_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[1b2]"></a>FLASH_GetFlagStatus</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[103]"></a>FLASH_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_inactive_erase
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_img_mgmt_set_boot_state
</UL>

<P><STRONG><a name="[1b3]"></a>FLASH_GetStatus</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>USART_DeInit</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[84]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[1b4]"></a>USART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1b5]"></a>USART_ClockInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1b6]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[85]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[1b7]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1b8]"></a>USART_SetAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1b9]"></a>USART_WakeUpConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1ba]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1bb]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1bc]"></a>USART_LINCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_tx_start
</UL>

<P><STRONG><a name="[1bd]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1be]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1bf]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1c0]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1c1]"></a>USART_SmartCardCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1c2]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1c3]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1c4]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1c5]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1c6]"></a>USART_IrDAConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1c7]"></a>USART_IrDACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_tx_start
</UL>

<P><STRONG><a name="[1c8]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[89]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[c4]"></a>get_ua_with_len</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, byte_order.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_ua_with_len
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ua_be16
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ua_be32
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_tlv
</UL>

<P><STRONG><a name="[108]"></a>crc16</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, crc16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_img_crc_check
</UL>

<P><STRONG><a name="[63]"></a>prop_lookup</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, props.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prop_lookup &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_err_handle
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_param_set_device_info
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_param_set_ack_cmd
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_img_mgmt_init
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_set_prop
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_length_up
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_request_value
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_send_req_to_ads_only
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_send_req
</UL>

<P><STRONG><a name="[c8]"></a>prop_send_req</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, props.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prop_send_req &rArr; prop_lookup &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_lookup
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_patt_set
</UL>

<P><STRONG><a name="[c9]"></a>prop_send_req_to_ads_only</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, props.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prop_send_req_to_ads_only &rArr; prop_lookup &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_lookup
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_send_tlv
</UL>

<P><STRONG><a name="[ca]"></a>prop_lookup_len</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, props.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prop_lookup_len &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_send_tlv
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_tlv
</UL>

<P><STRONG><a name="[53]"></a>prop_send</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, props.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = prop_send &rArr; serial_send_prop &rArr; serial_tx_buf_send &rArr; spi_tx_wait &rArr; spi_tx_start &rArr; spi_tx_end &rArr; spi_platform_io &rArr; spi_platform_in
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_send_prop
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_template_version
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_send_generic
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_version
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_inactive_version
</UL>

<P><STRONG><a name="[1]"></a>prop_send_generic</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, props.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = prop_send_generic &rArr; prop_send &rArr; serial_send_prop &rArr; serial_tx_buf_send &rArr; spi_tx_wait &rArr; spi_tx_start &rArr; spi_tx_end &rArr; spi_platform_io &rArr; spi_platform_in
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_send
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sac_property.o(.data)
</UL>
<P><STRONG><a name="[cd]"></a>prop_request_value</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, props.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prop_request_value &rArr; prop_lookup &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_lookup
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_data_cmd
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_send_tlv
</UL>

<P><STRONG><a name="[ce]"></a>prop_swap</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, props.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prop_swap
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_tlv
</UL>

<P><STRONG><a name="[e0]"></a>prop_notify_failure</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, props.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prop_notify_failure
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_tlv
</UL>

<P><STRONG><a name="[64]"></a>prop_send_done</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, props.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prop_send_done &rArr; serial_is_ads_busy &rArr; spi_is_ads_busy &rArr; spi_platform_io &rArr; spi_platform_in
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_is_ads_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f1]"></a>prop_setup_retry</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, props.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_send_prop
</UL>

<P><STRONG><a name="[ea]"></a>prop_is_busy</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, props.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_send_next_tlv
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_send_tlv
</UL>

<P><STRONG><a name="[61]"></a>prop_poll</STRONG> (Thumb, 450 bytes, Stack size 24 bytes, props.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = prop_poll &rArr; serial_request_prop &rArr; serial_tx_buf_send &rArr; spi_tx_wait &rArr; spi_tx_start &rArr; spi_tx_end &rArr; spi_platform_io &rArr; spi_platform_in
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_service_listen
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_request_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c9]"></a>prop_pending</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, props.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>prop_update_connectivity</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, props.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_tlv
</UL>

<P><STRONG><a name="[d4]"></a>prop_nak</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, props.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prop_nak &rArr; prop_dp_nak &rArr; prop_dp_fatal_err
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_nak
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_data_cmd
</UL>

<P><STRONG><a name="[66]"></a>prop_lookup_error</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, props.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e1]"></a>serial_tx_buf_get</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, serial_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = serial_tx_buf_get &rArr; spi_tx_buf_get_for_props &rArr; spi_tx_check_busy &rArr; spi_platform_io &rArr; spi_platform_in
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tx_buf_get_for_props
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tx_buf_get
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_restore
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_disable_save
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_cmd
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_abort
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_fetched
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_request
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_data_tx
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_create_tx
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_ota_send
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_save
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_write
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_read
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_mod_ota_send
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_name_tlv
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_err
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_service_listen
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_send_prop
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_request_prop
</UL>

<P><STRONG><a name="[e4]"></a>serial_tx_cancel</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, serial_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = serial_tx_cancel &rArr; intr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_data_tx
</UL>

<P><STRONG><a name="[e5]"></a>serial_tx_buf_send</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, serial_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = serial_tx_buf_send &rArr; spi_tx_wait &rArr; spi_tx_start &rArr; spi_tx_end &rArr; spi_platform_io &rArr; spi_platform_in
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tx_wait
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_cmd
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_abort
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_fetched
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_request
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_data_tx
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_create_tx
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_ota_send
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_save
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_write
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_read
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_mod_ota_send
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_name_tlv
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_err
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_service_listen
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_send_prop
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_request_prop
</UL>

<P><STRONG><a name="[ec]"></a>serial_rx_data_cmd</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, serial_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = serial_rx_data_cmd &rArr; serial_rx_send_next_tlv &rArr; serial_tx_err &rArr; serial_tx_buf_send &rArr; spi_tx_wait &rArr; spi_tx_start &rArr; spi_tx_end &rArr; spi_platform_io &rArr; spi_platform_in
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_resp
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_send_next_tlv
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_send_tlv
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_err
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_tlv
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_nak
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_request_value
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_process_inc_pkt
</UL>

<P><STRONG><a name="[ee]"></a>send_name_tlv</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, serial_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_buf_send
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_buf_get
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_ua_be16
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_tlv_string
</UL>

<P><STRONG><a name="[ef]"></a>send_tlv_string</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, serial_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_name_tlv
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[cc]"></a>serial_send_prop</STRONG> (Thumb, 758 bytes, Stack size 88 bytes, serial_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = serial_send_prop &rArr; serial_tx_buf_send &rArr; spi_tx_wait &rArr; spi_tx_start &rArr; spi_tx_end &rArr; spi_platform_io &rArr; spi_platform_in
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_buf_send
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_buf_get
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ua_be32
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_ua_be16
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_ua_be32
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_setup_retry
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_send
</UL>

<P><STRONG><a name="[d3]"></a>serial_request_prop</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, serial_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = serial_request_prop &rArr; serial_tx_buf_send &rArr; spi_tx_wait &rArr; spi_tx_start &rArr; spi_tx_end &rArr; spi_platform_io &rArr; spi_platform_in
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_buf_send
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_buf_get
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_ua_be16
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_poll
</UL>

<P><STRONG><a name="[5d]"></a>serial_tx_cmd</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, serial_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = serial_tx_cmd &rArr; serial_tx_buf_send &rArr; spi_tx_wait &rArr; spi_tx_start &rArr; spi_tx_end &rArr; spi_platform_io &rArr; spi_platform_in
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_buf_send
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_buf_get
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_ua_be16
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d2]"></a>serial_tx_service_listen</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, serial_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = serial_tx_service_listen &rArr; serial_tx_buf_send &rArr; spi_tx_wait &rArr; spi_tx_start &rArr; spi_tx_end &rArr; spi_platform_io &rArr; spi_platform_in
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_buf_send
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_buf_get
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_ua_be16
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_poll
</UL>

<P><STRONG><a name="[d1]"></a>serial_is_ads_busy</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, serial_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = serial_is_ads_busy &rArr; spi_is_ads_busy &rArr; spi_platform_io &rArr; spi_platform_in
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_is_ads_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_send_done
</UL>

<P><STRONG><a name="[5f]"></a>serial_poll</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, serial_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 708<LI>Call Chain = serial_poll &rArr; spi_poll &rArr; spi_rx_wait &rArr; spi_rx &rArr; serial_process_inc_pkt &rArr; conf_rx &rArr; conf_update &rArr; sched_run_all &rArr; sched_evaluate &rArr; sched_determine_range &rArr; sched_determine_big_range &rArr;  sched_determine_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_poll
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f5]"></a>serial_process_inc_pkt</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, serial_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = serial_process_inc_pkt &rArr; conf_rx &rArr; conf_update &rArr; sched_run_all &rArr; sched_evaluate &rArr; sched_determine_range &rArr; sched_determine_big_range &rArr;  sched_determine_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_rx
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_data_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_rx
</UL>

<P><STRONG><a name="[114]"></a>tlv_get</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, tlv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tlv_get
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_ota_start
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_ota_load
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_ota_boot
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_model_rx
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_dsn_rx
</UL>

<P><STRONG><a name="[f7]"></a>tlv_put</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, tlv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tlv_put
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_ota_send
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_write
</UL>

<P><STRONG><a name="[fa]"></a>utf8_gets</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, utf8.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = utf8_gets &rArr; utf8_get
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_get
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_update
</UL>

<P><STRONG><a name="[fc]"></a>set_length_up</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, demo_stream.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_lookup
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_start_send
</UL>

<P><STRONG><a name="[5a]"></a>demo_stream_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, demo_stream.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = demo_stream_init
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ff]"></a>send_inactive_version</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, demo_img_mgmt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_send
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[10b]"></a>set_boot2inactive</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, demo_img_mgmt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_boot
</UL>

<P><STRONG><a name="[b]"></a>send_template_version</STRONG> (Thumb, 44 bytes, Stack size 56 bytes, demo_img_mgmt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = send_template_version &rArr; prop_send &rArr; serial_send_prop &rArr; serial_tx_buf_send &rArr; spi_tx_wait &rArr; spi_tx_start &rArr; spi_tx_end &rArr; spi_platform_io &rArr; spi_platform_in
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_send
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_tmpl_ver
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sac_property.o(.data)
</UL>
<P><STRONG><a name="[65]"></a>template_version_sent</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, demo_img_mgmt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = template_version_sent &rArr; mcu_tmpl_ver
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_tmpl_ver
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_flash_block_erased
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[54]"></a>mcu_img_mgmt_init</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, demo_img_mgmt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = mcu_img_mgmt_init &rArr; mcu_img_crc_check &rArr; crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_lookup
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_ota_stat
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_img_mgmt_get_boot_state
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_tmpl_ver
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_img_crc_check
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_img_mgmt_set_boot_state
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_set_inactive_version
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11a]"></a>conf_mod_ota_go</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, conf_access.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_rx
</UL>

<P><STRONG><a name="[117]"></a>conf_read</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, conf_access.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = conf_read &rArr; serial_tx_buf_send &rArr; spi_tx_wait &rArr; spi_tx_start &rArr; spi_tx_end &rArr; spi_platform_io &rArr; spi_platform_in
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_ua_be16
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_buf_send
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_buf_get
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_poll
</UL>

<P><STRONG><a name="[1ca]"></a>conf_set_cb</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, conf_access.o(.text), UNUSED)

<P><STRONG><a name="[118]"></a>conf_write</STRONG> (Thumb, 264 bytes, Stack size 64 bytes, conf_access.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_ua_be16
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_put
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_buf_send
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_buf_get
</UL>

<P><STRONG><a name="[119]"></a>conf_save</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, conf_access.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_ua_be16
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_buf_send
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_buf_get
</UL>

<P><STRONG><a name="[f6]"></a>conf_rx</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, conf_access.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = conf_rx &rArr; conf_update &rArr; sched_run_all &rArr; sched_evaluate &rArr; sched_determine_range &rArr; sched_determine_big_range &rArr;  sched_determine_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_ota_start
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_ota_load
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_ota_boot
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_mod_ota_go
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_update
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_process_inc_pkt
</UL>

<P><STRONG><a name="[60]"></a>conf_poll</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, conf_access.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = conf_poll &rArr; conf_read &rArr; serial_tx_buf_send &rArr; spi_tx_wait &rArr; spi_tx_start &rArr; spi_tx_end &rArr; spi_platform_io &rArr; spi_platform_in
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_ota_send
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_read
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_mod_ota_send
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10f]"></a>host_ota_stat</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, host_ota.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_img_mgmt_init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_ota_start
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_ota_load
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_img_load
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_img_upgrade_check
</UL>

<P><STRONG><a name="[11b]"></a>host_ota_start</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, host_ota.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = host_ota_start &rArr; tlv_get
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ua_be16
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ua_be32
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_ota_stat
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_get
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_rx
</UL>

<P><STRONG><a name="[110]"></a>host_ota_go</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, host_ota.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_img_upgrade_check
</UL>

<P><STRONG><a name="[11c]"></a>host_ota_load</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, host_ota.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = host_ota_load &rArr; tlv_get
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ua_be32
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_ota_stat
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_get
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_rx
</UL>

<P><STRONG><a name="[11d]"></a>host_ota_boot</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, host_ota.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = host_ota_boot &rArr; tlv_get
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_get
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_rx
</UL>

<P><STRONG><a name="[11e]"></a>host_ota_send</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, host_ota.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = host_ota_send &rArr; serial_tx_buf_send &rArr; spi_tx_wait &rArr; spi_tx_start &rArr; spi_tx_end &rArr; spi_platform_io &rArr; spi_platform_in
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_ua_be16
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_put
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_buf_send
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_buf_get
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_poll
</UL>

<P><STRONG><a name="[123]"></a>clock_is_leap</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, clock_utils.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_decr_month
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_incr_month
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_decr_day
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_incr_day
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_fill_details
</UL>

<P><STRONG><a name="[124]"></a>clock_get_day_occur_in_month</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, clock_utils.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_decr_month
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_decr_day
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_incr_day
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_fill_details
</UL>

<P><STRONG><a name="[122]"></a>clock_fill_details</STRONG> (Thumb, 372 bytes, Stack size 20 bytes, clock_utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = clock_fill_details
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_get_day_occur_in_month
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_is_leap
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_determine_range
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_determine_big_range
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_month_find_range
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_day_find_range
</UL>

<P><STRONG><a name="[125]"></a>clock_incr_day</STRONG> (Thumb, 254 bytes, Stack size 8 bytes, clock_utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clock_incr_day
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_get_day_occur_in_month
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_is_leap
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_day_find_range
</UL>

<P><STRONG><a name="[126]"></a>clock_decr_day</STRONG> (Thumb, 242 bytes, Stack size 8 bytes, clock_utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clock_decr_day
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_get_day_occur_in_month
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_is_leap
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_determine_big_range
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_day_find_range
</UL>

<P><STRONG><a name="[127]"></a>clock_incr_month</STRONG> (Thumb, 262 bytes, Stack size 4 bytes, clock_utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = clock_incr_month
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_is_leap
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_month_find_range
</UL>

<P><STRONG><a name="[128]"></a>clock_decr_month</STRONG> (Thumb, 208 bytes, Stack size 4 bytes, clock_utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = clock_decr_month
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_get_day_occur_in_month
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_is_leap
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_month_find_range
</UL>

<P><STRONG><a name="[138]"></a>clock_local</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, clock_utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clock_local
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_determine_range
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_adjust_boundary_if_crossover
</UL>

<P><STRONG><a name="[13b]"></a>clock_local_to_utc</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, clock_utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clock_local_to_utc
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_determine_range
</UL>

<P><STRONG><a name="[129]"></a>sched_int_get</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sched_int_get
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ua_be16
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ua_be32
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_set_sched_value
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_evaluate
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_set_prop
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_update_time_info
</UL>

<P><STRONG><a name="[116]"></a>sched_update_time_info</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sched_update_time_info &rArr; sched_int_get
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_int_get
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_clock_set
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_update
</UL>

<P><STRONG><a name="[51]"></a>sched_run_all</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = sched_run_all &rArr; sched_evaluate &rArr; sched_determine_range &rArr; sched_determine_big_range &rArr;  sched_determine_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_evaluate
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_schedule
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_update
</UL>

<P><STRONG><a name="[12e]"></a>sched_set_prop</STRONG> (Thumb, 156 bytes, Stack size 56 bytes, sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sched_set_prop &rArr; prop_lookup &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_lookup
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_int_get
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_evaluate
</UL>

<P><STRONG><a name="[1cb]"></a>sched_log</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sched.o(.text), UNUSED)

<P><STRONG><a name="[139]"></a>sched_determine_range</STRONG> (Thumb, 756 bytes, Stack size 128 bytes, schedeval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = sched_determine_range &rArr; sched_determine_big_range &rArr;  sched_determine_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_determine_big_range
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_get_minimum
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_local_to_utc
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_local
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_fill_details
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_determine_big_range
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_evaluate
</UL>

<P><STRONG><a name="[12d]"></a>sched_evaluate</STRONG> (Thumb, 554 bytes, Stack size 96 bytes, schedeval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = sched_evaluate &rArr; sched_determine_range &rArr; sched_determine_big_range &rArr;  sched_determine_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_determine_range
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_set_sched_value
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_init_schedule
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_set_prop
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_int_get
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_run_all
</UL>

<P><STRONG><a name="[fe]"></a>prop_dp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, prop_dp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_stream_init
</UL>

<P><STRONG><a name="[13d]"></a>prop_dp_abort</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, prop_dp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = prop_dp_abort &rArr; serial_tx_buf_send &rArr; spi_tx_wait &rArr; spi_tx_start &rArr; spi_tx_end &rArr; spi_platform_io &rArr; spi_platform_in
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_done
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_ua_be16
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_buf_send
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_buf_get
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_step
</UL>

<P><STRONG><a name="[d5]"></a>prop_dp_nak</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, prop_dp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prop_dp_nak &rArr; prop_dp_fatal_err
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_fatal_err
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_nak
</UL>

<P><STRONG><a name="[ed]"></a>prop_dp_resp</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, prop_dp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = prop_dp_resp &rArr; prop_dp_rx &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_rx
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_create_resp
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_data_cmd
</UL>

<P><STRONG><a name="[45]"></a>prop_dp_send</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, prop_dp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = prop_dp_send &rArr; prop_dp_step &rArr; prop_dp_data_tx &rArr; serial_tx_buf_send &rArr; spi_tx_wait &rArr; spi_tx_start &rArr; spi_tx_end &rArr; spi_platform_io &rArr; spi_platform_in
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_step
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_msg.o(.text)
</UL>
<P><STRONG><a name="[14c]"></a>prop_dp_set</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, prop_dp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[fd]"></a>prop_dp_start_send</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, prop_dp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_length_up
</UL>

<P><STRONG><a name="[f3]"></a>spi_is_ads_busy</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = spi_is_ads_busy &rArr; spi_platform_io &rArr; spi_platform_in
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_platform_io
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_platform_slave_select
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_is_ads_busy
</UL>

<P><STRONG><a name="[e6]"></a>spi_tx_wait</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = spi_tx_wait &rArr; spi_tx_start &rArr; spi_tx_end &rArr; spi_platform_io &rArr; spi_platform_in
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tx_start
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tx_check_busy
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tx_get_mask_to_check
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_poll
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_buf_send
</UL>

<P><STRONG><a name="[e3]"></a>spi_tx_buf_get</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = spi_tx_buf_get &rArr; spi_platform_rx_pending
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_platform_rx_pending
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_platform_slave_select
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_buf_get
</UL>

<P><STRONG><a name="[e2]"></a>spi_tx_buf_get_for_props</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = spi_tx_buf_get_for_props &rArr; spi_tx_check_busy &rArr; spi_platform_io &rArr; spi_platform_in
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_platform_rx_pending
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_platform_slave_deselect
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_platform_slave_select
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tx_check_busy
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_buf_get
</UL>

<P><STRONG><a name="[144]"></a>spi_tx_buf_trim</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_data_tx
</UL>

<P><STRONG><a name="[15a]"></a>spi_status</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_platform_io
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_platform_slave_deselect
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_platform_slave_select
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_ready
</UL>

<P><STRONG><a name="[f4]"></a>spi_poll</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = spi_poll &rArr; spi_rx_wait &rArr; spi_rx &rArr; serial_process_inc_pkt &rArr; conf_rx &rArr; conf_update &rArr; sched_run_all &rArr; sched_evaluate &rArr; sched_determine_range &rArr; sched_determine_big_range &rArr;  sched_determine_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_platform_rx_pending
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_platform_slave_select
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_ready
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_rx_wait
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_rx
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tx_start
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tx_end
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_restore
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_disable_save
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tx_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_poll
</UL>

<P><STRONG><a name="[15b]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1cc]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1cd]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_frame
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_tmpl_ver
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tx_buf_get_for_props
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tx_buf_get
</UL>

<P><STRONG><a name="[7b]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_queue_init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_init_schedule
</UL>

<P><STRONG><a name="[1ce]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[15c]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[52]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_template_version
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_send_generic
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_send
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_version
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_create_tx
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_inactive_version
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_img_upgrade_check
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_tlv_string
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_name_tlv
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_request_value
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_lookup_len
</UL>

<P><STRONG><a name="[c7]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_lookup
</UL>

<P><STRONG><a name="[cb]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;template_version_sent
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_img_mgmt_init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_set
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_rx
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_img_upgrade_check
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_find_ver
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_lookup_len
</UL>

<P><STRONG><a name="[4f]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1cf]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1d0]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1d1]"></a>__decompress1</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1d2]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1d3]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1d4]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[62]"></a>cmp_gt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, app_main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[95]"></a>bit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, spi_platform.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_platform_rx_pending
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_platform_slave_deselect
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_platform_slave_select
</UL>

<P><STRONG><a name="[97]"></a>spi_platform_wait_idle</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, spi_platform.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_platform_crc_err
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_platform_crc_en
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_platform_slave_deselect
</UL>

<P><STRONG><a name="[98]"></a>spi_platform_out</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, spi_platform.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi_platform_out
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_platform_io
</UL>

<P><STRONG><a name="[9a]"></a>spi_platform_in</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, spi_platform.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi_platform_in
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_platform_io_crc
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_platform_io
</UL>

<P><STRONG><a name="[a4]"></a>bit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_button_read
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_set_factory_rst_led
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_reset_module
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_ready
</UL>

<P><STRONG><a name="[a3]"></a>cmp_gt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_delay_time
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_factory_reset_detect
</UL>

<P><STRONG><a name="[a5]"></a>stm32_intr_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = stm32_intr_init &rArr; spi_platform_intr_init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_platform_intr_init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_init
</UL>

<P><STRONG><a name="[a9]"></a>stm32_systick_init</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, stm32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = stm32_systick_init
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_init
</UL>

<P><STRONG><a name="[a7]"></a>stm32_button_read</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, stm32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stm32_button_read
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_set_button_state
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_factory_reset_detect
</UL>

<P><STRONG><a name="[ab]"></a>SetSysClockTo24</STRONG> (Thumb, 204 bytes, Stack size 12 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo24
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[aa]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo24
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo24
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[c6]"></a>get_ua_be32</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, byte_order.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ua_with_len
</UL>

<P><STRONG><a name="[c5]"></a>get_ua_be16</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, byte_order.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ua_with_len
</UL>

<P><STRONG><a name="[cf]"></a>htons</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, props.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_swap
</UL>

<P><STRONG><a name="[d0]"></a>htonl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, props.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_swap
</UL>

<P><STRONG><a name="[f0]"></a>htons</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, serial_msg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_send_prop
</UL>

<P><STRONG><a name="[df]"></a>ntohs</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, serial_msg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_send_next_tlv
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_send_tlv
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_tlv
</UL>

<P><STRONG><a name="[f2]"></a>put_ua_be32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, serial_msg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_send_prop
</UL>

<P><STRONG><a name="[e8]"></a>put_ua_be16</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, serial_msg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_cmd
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_name_tlv
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_err
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_service_listen
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_send_prop
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_request_prop
</UL>

<P><STRONG><a name="[dd]"></a>get_ua_be32</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, serial_msg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_send_next_tlv
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_tlv
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_send_prop
</UL>

<P><STRONG><a name="[d7]"></a>intr_pri_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, serial_msg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_restore
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_enable
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_disable
</UL>

<P><STRONG><a name="[da]"></a>intr_pri_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, serial_msg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_disable_save
</UL>

<P><STRONG><a name="[d6]"></a>intr_disable</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, serial_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = intr_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_pri_set
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_disable_save
</UL>

<P><STRONG><a name="[d8]"></a>intr_enable</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, serial_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_pri_set
</UL>

<P><STRONG><a name="[d9]"></a>intr_disable_save</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, serial_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = intr_disable_save &rArr; intr_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_disable
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_pri_get
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_buf_get
</UL>

<P><STRONG><a name="[db]"></a>intr_restore</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, serial_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = intr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_pri_set
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_buf_send
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_cancel
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_buf_get
</UL>

<P><STRONG><a name="[dc]"></a>serial_rx_tlv</STRONG> (Thumb, 706 bytes, Stack size 64 bytes, serial_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = serial_rx_tlv &rArr; prop_lookup_len &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ua_be32
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_update_connectivity
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_notify_failure
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_swap
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_lookup_len
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ua_with_len
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_data_cmd
</UL>

<P><STRONG><a name="[e7]"></a>serial_tx_err</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, serial_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = serial_tx_err &rArr; serial_tx_buf_send &rArr; spi_tx_wait &rArr; spi_tx_start &rArr; spi_tx_end &rArr; spi_platform_io &rArr; spi_platform_in
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_buf_send
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_buf_get
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_ua_be16
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_data_cmd
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_send_next_tlv
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_send_tlv
</UL>

<P><STRONG><a name="[e9]"></a>serial_rx_send_tlv</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, serial_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = serial_rx_send_tlv &rArr; serial_tx_err &rArr; serial_tx_buf_send &rArr; spi_tx_wait &rArr; spi_tx_start &rArr; spi_tx_end &rArr; spi_platform_io &rArr; spi_platform_in
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_err
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_is_busy
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_request_value
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_lookup_len
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_send_req_to_ads_only
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_data_cmd
</UL>

<P><STRONG><a name="[eb]"></a>serial_rx_send_next_tlv</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, serial_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = serial_rx_send_next_tlv &rArr; serial_tx_err &rArr; serial_tx_buf_send &rArr; spi_tx_wait &rArr; spi_tx_start &rArr; spi_tx_end &rArr; spi_platform_io &rArr; spi_platform_in
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_err
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ua_be32
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_is_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_data_cmd
</UL>

<P><STRONG><a name="[f9]"></a>utf8_put_wchar</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, utf8.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_get
</UL>

<P><STRONG><a name="[f8]"></a>utf8_get</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, utf8.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = utf8_get
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_put_wchar
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_gets
</UL>

<P><STRONG><a name="[fb]"></a>test_patt</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, demo_stream.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_patt_set
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_patt_get
</UL>

<P><STRONG><a name="[46]"></a>test_patt_get</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, demo_stream.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = test_patt_get
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_patt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> demo_stream.o(.text)
</UL>
<P><STRONG><a name="[47]"></a>test_patt_set</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, demo_stream.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = test_patt_set &rArr; prop_send_req &rArr; prop_lookup &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_patt
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_send_req
</UL>
<BR>[Address Reference Count : 1]<UL><LI> demo_stream.o(.text)
</UL>
<P><STRONG><a name="[107]"></a>ntohs</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, demo_img_mgmt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_img_crc_check
</UL>

<P><STRONG><a name="[106]"></a>htonl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, demo_img_mgmt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_img_crc_check
</UL>

<P><STRONG><a name="[10e]"></a>mcu_set_inactive_version</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, demo_img_mgmt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_img_mgmt_init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_img_load
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_inactive_erase
</UL>

<P><STRONG><a name="[101]"></a>mcu_flash_block_erased</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, demo_img_mgmt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;template_version_sent
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_inactive_erase
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_img_mgmt_set_boot_state
</UL>

<P><STRONG><a name="[100]"></a>mcu_img_mgmt_set_boot_state</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, demo_img_mgmt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mcu_img_mgmt_set_boot_state &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_flash_block_erased
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_img_mgmt_init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_boot
</UL>

<P><STRONG><a name="[105]"></a>mcu_img_crc_check</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, demo_img_mgmt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mcu_img_crc_check &rArr; crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_img_mgmt_init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_img_load
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_boot
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_find_ver
</UL>

<P><STRONG><a name="[109]"></a>mcu_find_ver</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, demo_img_mgmt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mcu_find_ver &rArr; mcu_img_crc_check &rArr; crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_img_crc_check
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_boot
</UL>

<P><STRONG><a name="[4a]"></a>mcu_boot</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, demo_img_mgmt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = mcu_boot &rArr; mcu_find_ver &rArr; mcu_img_crc_check &rArr; crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_find_ver
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_img_crc_check
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_img_mgmt_set_boot_state
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_boot2inactive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> demo_img_mgmt.o(.text)
</UL>
<P><STRONG><a name="[10c]"></a>mcu_tmpl_ver</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, demo_img_mgmt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mcu_tmpl_ver
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_template_version
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;template_version_sent
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_img_mgmt_init
</UL>

<P><STRONG><a name="[111]"></a>mcu_img_mgmt_get_boot_state</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, demo_img_mgmt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_img_mgmt_init
</UL>

<P><STRONG><a name="[10d]"></a>mcu_inactive_erase</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, demo_img_mgmt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mcu_inactive_erase &rArr; FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_flash_block_erased
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_set_inactive_version
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_img_upgrade_check
</UL>

<P><STRONG><a name="[48]"></a>mcu_img_upgrade_check</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, demo_img_mgmt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mcu_img_upgrade_check &rArr; mcu_inactive_erase &rArr; FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_ota_stat
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_ota_go
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_inactive_erase
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> demo_img_mgmt.o(.text)
</UL>
<P><STRONG><a name="[49]"></a>mcu_img_load</STRONG> (Thumb, 334 bytes, Stack size 40 bytes, demo_img_mgmt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = mcu_img_load &rArr; mcu_img_crc_check &rArr; crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_ota_stat
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_img_crc_check
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_set_inactive_version
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> demo_img_mgmt.o(.text)
</UL>
<P><STRONG><a name="[113]"></a>put_ua_be16</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, conf_access.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_save
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_write
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_read
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_mod_ota_send
</UL>

<P><STRONG><a name="[112]"></a>conf_mod_ota_send</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, conf_access.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = conf_mod_ota_send &rArr; serial_tx_buf_send &rArr; spi_tx_wait &rArr; spi_tx_start &rArr; spi_tx_end &rArr; spi_platform_io &rArr; spi_platform_in
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_ua_be16
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_buf_send
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_buf_get
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_poll
</UL>

<P><STRONG><a name="[4b]"></a>conf_dsn_rx</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, conf_access.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = conf_dsn_rx &rArr; tlv_get
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_get
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conf_access.o(.text)
</UL>
<P><STRONG><a name="[4c]"></a>conf_model_rx</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, conf_access.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = conf_model_rx &rArr; tlv_get
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_get
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conf_access.o(.text)
</UL>
<P><STRONG><a name="[115]"></a>conf_update</STRONG> (Thumb, 256 bytes, Stack size 88 bytes, conf_access.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = conf_update &rArr; sched_run_all &rArr; sched_evaluate &rArr; sched_determine_range &rArr; sched_determine_big_range &rArr;  sched_determine_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_run_all
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_update_time_info
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_gets
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_rx
</UL>

<P><STRONG><a name="[121]"></a>put_ua_be16</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, host_ota.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_ota_send
</UL>

<P><STRONG><a name="[120]"></a>get_ua_be32</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, host_ota.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_ota_start
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_ota_load
</UL>

<P><STRONG><a name="[11f]"></a>get_ua_be16</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, host_ota.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_ota_start
</UL>

<P><STRONG><a name="[12b]"></a>get_ua_be32</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sched.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_int_get
</UL>

<P><STRONG><a name="[12a]"></a>get_ua_be16</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sched.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_int_get
</UL>

<P><STRONG><a name="[12c]"></a>sched_clock_set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sched.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_update_time_info
</UL>

<P><STRONG><a name="[12f]"></a>sched_init_schedule</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, schedeval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sched_init_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_evaluate
</UL>

<P><STRONG><a name="[130]"></a>sched_set_sched_value</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, schedeval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sched_set_sched_value &rArr; sched_int_get
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_int_get
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_evaluate
</UL>

<P><STRONG><a name="[136]"></a>sched_check_mask</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, schedeval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_determine_big_range
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_month_find_range
</UL>

<P><STRONG><a name="[134]"></a>sched_check_day</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, schedeval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sched_check_day
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_determine_big_range
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_day_find_range
</UL>

<P><STRONG><a name="[133]"></a>sched_day_spec_is_given</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, schedeval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sched_day_spec_is_given
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_determine_big_range
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_day_find_range
</UL>

<P><STRONG><a name="[131]"></a>sched_day_find_range</STRONG> (Thumb, 246 bytes, Stack size 72 bytes, schedeval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = sched_day_find_range &rArr; clock_fill_details
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_day_spec_is_given
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_check_day
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_decr_day
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_incr_day
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_fill_details
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_determine_big_range
</UL>

<P><STRONG><a name="[135]"></a>sched_month_find_range</STRONG> (Thumb, 266 bytes, Stack size 72 bytes, schedeval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = sched_month_find_range &rArr; clock_fill_details
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_check_mask
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_decr_month
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_incr_month
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_fill_details
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_determine_big_range
</UL>

<P><STRONG><a name="[137]"></a>sched_adjust_boundary_if_crossover</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, schedeval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sched_adjust_boundary_if_crossover &rArr; clock_local
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_local
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_determine_big_range
</UL>

<P><STRONG><a name="[13c]"></a>sched_get_minimum</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, schedeval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_determine_range
</UL>

<P><STRONG><a name="[13a]"></a>sched_determine_big_range</STRONG> (Thumb, 1066 bytes, Stack size 168 bytes, schedeval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + In Cycle
<LI>Call Chain = sched_determine_big_range &rArr;  sched_determine_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_determine_range
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_adjust_boundary_if_crossover
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_month_find_range
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_day_find_range
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_day_spec_is_given
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_check_day
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_check_mask
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_decr_day
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_fill_details
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_determine_range
</UL>

<P><STRONG><a name="[148]"></a>ntohs</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, prop_dp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_resp
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_nak
</UL>

<P><STRONG><a name="[143]"></a>put_ua_be32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, prop_dp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_request
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_data_tx
</UL>

<P><STRONG><a name="[13e]"></a>put_ua_be16</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, prop_dp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_abort
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_fetched
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_request
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_data_tx
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_create_tx
</UL>

<P><STRONG><a name="[14b]"></a>get_ua_be32</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, prop_dp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_rx
</UL>

<P><STRONG><a name="[13f]"></a>prop_dp_done</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, prop_dp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_abort
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_step
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_fetched
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_data_tx
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_fatal_err
</UL>

<P><STRONG><a name="[140]"></a>prop_dp_fatal_err</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, prop_dp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prop_dp_fatal_err
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_done
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_create_resp
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_fetched
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_request
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_data_tx
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_nak
</UL>

<P><STRONG><a name="[141]"></a>prop_dp_create_tx</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, prop_dp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = prop_dp_create_tx &rArr; serial_tx_buf_send &rArr; spi_tx_wait &rArr; spi_tx_start &rArr; spi_tx_end &rArr; spi_platform_io &rArr; spi_platform_in
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_ua_be16
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_buf_send
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_buf_get
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_step
</UL>

<P><STRONG><a name="[142]"></a>prop_dp_data_tx</STRONG> (Thumb, 348 bytes, Stack size 48 bytes, prop_dp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = prop_dp_data_tx &rArr; serial_tx_buf_send &rArr; spi_tx_wait &rArr; spi_tx_start &rArr; spi_tx_end &rArr; spi_platform_io &rArr; spi_platform_in
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tx_buf_trim
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_fatal_err
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_done
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_ua_be16
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_ua_be32
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_buf_send
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_cancel
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_buf_get
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_step
</UL>

<P><STRONG><a name="[145]"></a>prop_dp_request</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, prop_dp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = prop_dp_request &rArr; serial_tx_buf_send &rArr; spi_tx_wait &rArr; spi_tx_start &rArr; spi_tx_end &rArr; spi_platform_io &rArr; spi_platform_in
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_fatal_err
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_ua_be16
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_ua_be32
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_buf_send
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_buf_get
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_step
</UL>

<P><STRONG><a name="[146]"></a>prop_dp_fetched</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, prop_dp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = prop_dp_fetched &rArr; serial_tx_buf_send &rArr; spi_tx_wait &rArr; spi_tx_start &rArr; spi_tx_end &rArr; spi_platform_io &rArr; spi_platform_in
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_fatal_err
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_done
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_ua_be16
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_buf_send
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_buf_get
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_step
</UL>

<P><STRONG><a name="[147]"></a>prop_dp_step</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, prop_dp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = prop_dp_step &rArr; prop_dp_data_tx &rArr; serial_tx_buf_send &rArr; spi_tx_wait &rArr; spi_tx_start &rArr; spi_tx_end &rArr; spi_platform_io &rArr; spi_platform_in
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_abort
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_fetched
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_request
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_data_tx
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_create_tx
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_done
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_send
</UL>

<P><STRONG><a name="[149]"></a>prop_dp_create_resp</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, prop_dp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prop_dp_create_resp &rArr; prop_dp_fatal_err
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_fatal_err
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_resp
</UL>

<P><STRONG><a name="[14a]"></a>prop_dp_rx</STRONG> (Thumb, 310 bytes, Stack size 56 bytes, prop_dp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = prop_dp_rx &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ua_be32
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_dp_resp
</UL>

<P><STRONG><a name="[14e]"></a>intr_pri_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_restore
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_enable
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_disable
</UL>

<P><STRONG><a name="[151]"></a>intr_pri_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_disable_save
</UL>

<P><STRONG><a name="[14d]"></a>intr_disable</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = intr_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_pri_set
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_disable_save
</UL>

<P><STRONG><a name="[14f]"></a>intr_enable</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_pri_set
</UL>

<P><STRONG><a name="[150]"></a>intr_disable_save</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = intr_disable_save &rArr; intr_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_disable
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_pri_get
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_poll
</UL>

<P><STRONG><a name="[152]"></a>intr_restore</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = intr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_pri_set
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_poll
</UL>

<P><STRONG><a name="[154]"></a>spi_delay</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_rx_wait
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_rx
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tx_start
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tx_check_busy
</UL>

<P><STRONG><a name="[157]"></a>spi_tx_get_mask_to_check</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tx_wait
</UL>

<P><STRONG><a name="[153]"></a>spi_tx_check_busy</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = spi_tx_check_busy &rArr; spi_platform_io &rArr; spi_platform_in
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_platform_io
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tx_wait
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tx_buf_get_for_props
</UL>

<P><STRONG><a name="[155]"></a>spi_tx_end</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = spi_tx_end &rArr; spi_platform_io &rArr; spi_platform_in
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_platform_io
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_platform_slave_deselect
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_platform_slave_select
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tx_start
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_poll
</UL>

<P><STRONG><a name="[156]"></a>spi_tx_start</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = spi_tx_start &rArr; spi_tx_end &rArr; spi_platform_io &rArr; spi_platform_in
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_platform_crc_err
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_platform_crc_en
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_platform_io_crc
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_platform_io
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tx_end
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tx_wait
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_poll
</UL>

<P><STRONG><a name="[158]"></a>spi_rx</STRONG> (Thumb, 362 bytes, Stack size 24 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 668<LI>Call Chain = spi_rx &rArr; serial_process_inc_pkt &rArr; conf_rx &rArr; conf_update &rArr; sched_run_all &rArr; sched_evaluate &rArr; sched_determine_range &rArr; sched_determine_big_range &rArr;  sched_determine_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_platform_crc_err
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_platform_crc_en
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_platform_io_crc
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_platform_io
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_platform_slave_deselect
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_platform_slave_select
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_delay
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_process_inc_pkt
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_rx_wait
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_poll
</UL>

<P><STRONG><a name="[159]"></a>spi_rx_wait</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = spi_rx_wait &rArr; spi_rx &rArr; serial_process_inc_pkt &rArr; conf_rx &rArr; conf_update &rArr; sched_run_all &rArr; sched_evaluate &rArr; sched_determine_range &rArr; sched_determine_big_range &rArr;  sched_determine_range (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_platform_io
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_platform_slave_deselect
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_platform_slave_select
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_rx
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_poll
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
